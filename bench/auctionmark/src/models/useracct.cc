/* This file is automatically generated. Do NOT modify it directly! */

#include "useracct.h"
#include "utils/utils.h"
#include "json.h"
#include <cassert>

namespace auctionmark {

using njson = nlohmann::json;

Useracct::Useracct(Nullable<uint64_t> u_id_,
                   Nullable<uint64_t> u_rating_,
                   Nullable<double>   u_balance_,
                   int                u_comments_,
                   Nullable<uint64_t> u_r_id_,
                   std::time_t        u_created_,
                   std::time_t        u_updated_,
                   std::string        u_sattr0_,
                   std::string        u_sattr1_,
                   std::string        u_sattr2_,
                   std::string        u_sattr3_,
                   std::string        u_sattr4_,
                   std::string        u_sattr5_,
                   std::string        u_sattr6_,
                   std::string        u_sattr7_,
                   uint64_t           u_iattr0_,
                   uint64_t           u_iattr1_,
                   uint64_t           u_iattr2_,
                   uint64_t           u_iattr3_,
                   uint64_t           u_iattr4_,
                   uint64_t           u_iattr5_,
                   uint64_t           u_iattr6_,
                   uint64_t           u_iattr7_) :
  u_id(u_id_),
  u_rating(u_rating_),
  u_balance(u_balance_),
  u_comments(u_comments_),
  u_r_id(u_r_id_),
  u_created(u_created_),
  u_updated(u_updated_),
  u_sattr0(u_sattr0_),
  u_sattr1(u_sattr1_),
  u_sattr2(u_sattr2_),
  u_sattr3(u_sattr3_),
  u_sattr4(u_sattr4_),
  u_sattr5(u_sattr5_),
  u_sattr6(u_sattr6_),
  u_sattr7(u_sattr7_),
  u_iattr0(u_iattr0_),
  u_iattr1(u_iattr1_),
  u_iattr2(u_iattr2_),
  u_iattr3(u_iattr3_),
  u_iattr4(u_iattr4_),
  u_iattr5(u_iattr5_),
  u_iattr6(u_iattr6_),
  u_iattr7(u_iattr7_) {}

Useracct Useracct::FromJson(const std::string &json) {
  njson j = njson::parse(json);
  Useracct model_instance;
  assert(j["u_id"].is_number() || j["u_id"].is_null());
  if (!j["u_id"].is_null()) {
    model_instance.u_id = (j["u_id"].get<uint64_t>());
  }
  assert(j["u_rating"].is_number() || j["u_rating"].is_null());
  if (!j["u_rating"].is_null()) {
    model_instance.u_rating = (j["u_rating"].get<uint64_t>());
  }
  assert(j["u_balance"].is_number() || j["u_balance"].is_null());
  if (!j["u_balance"].is_null()) {
    model_instance.u_balance = (j["u_balance"].get<double>());
  }
  assert(j["u_comments"].is_number());
  model_instance.u_comments = (j["u_comments"].get<int>());
  assert(j["u_r_id"].is_number() || j["u_r_id"].is_null());
  if (!j["u_r_id"].is_null()) {
    model_instance.u_r_id = (j["u_r_id"].get<uint64_t>());
  }
  assert(j["u_created"].is_string());
  model_instance.u_created = (j["u_created"].get<std::time_t>());
  assert(j["u_updated"].is_string());
  model_instance.u_updated = (j["u_updated"].get<std::time_t>());
  assert(j["u_sattr0"].is_string());
  model_instance.u_sattr0 = (j["u_sattr0"].get<std::string>());
  assert(j["u_sattr1"].is_string());
  model_instance.u_sattr1 = (j["u_sattr1"].get<std::string>());
  assert(j["u_sattr2"].is_string());
  model_instance.u_sattr2 = (j["u_sattr2"].get<std::string>());
  assert(j["u_sattr3"].is_string());
  model_instance.u_sattr3 = (j["u_sattr3"].get<std::string>());
  assert(j["u_sattr4"].is_string());
  model_instance.u_sattr4 = (j["u_sattr4"].get<std::string>());
  assert(j["u_sattr5"].is_string());
  model_instance.u_sattr5 = (j["u_sattr5"].get<std::string>());
  assert(j["u_sattr6"].is_string());
  model_instance.u_sattr6 = (j["u_sattr6"].get<std::string>());
  assert(j["u_sattr7"].is_string());
  model_instance.u_sattr7 = (j["u_sattr7"].get<std::string>());
  assert(j["u_iattr0"].is_number());
  model_instance.u_iattr0 = (j["u_iattr0"].get<uint64_t>());
  assert(j["u_iattr1"].is_number());
  model_instance.u_iattr1 = (j["u_iattr1"].get<uint64_t>());
  assert(j["u_iattr2"].is_number());
  model_instance.u_iattr2 = (j["u_iattr2"].get<uint64_t>());
  assert(j["u_iattr3"].is_number());
  model_instance.u_iattr3 = (j["u_iattr3"].get<uint64_t>());
  assert(j["u_iattr4"].is_number());
  model_instance.u_iattr4 = (j["u_iattr4"].get<uint64_t>());
  assert(j["u_iattr5"].is_number());
  model_instance.u_iattr5 = (j["u_iattr5"].get<uint64_t>());
  assert(j["u_iattr6"].is_number());
  model_instance.u_iattr6 = (j["u_iattr6"].get<uint64_t>());
  assert(j["u_iattr7"].is_number());
  model_instance.u_iattr7 = (j["u_iattr7"].get<uint64_t>());
  return std::move(model_instance);
}

std::string Useracct::ToJson() {
  njson j;

  if (u_id.IsNull()) {
    j["u_id"] = nullptr;
  } else {
    j["u_id"] = (u_id.value());
  }
  if (u_rating.IsNull()) {
    j["u_rating"] = nullptr;
  } else {
    j["u_rating"] = (u_rating.value());
  }
  if (u_balance.IsNull()) {
    j["u_balance"] = nullptr;
  } else {
    j["u_balance"] = (u_balance.value());
  }
  j["u_comments"] = (u_comments);
  if (u_r_id.IsNull()) {
    j["u_r_id"] = nullptr;
  } else {
    j["u_r_id"] = (u_r_id.value());
  }
  j["u_created"] = (u_created);
  j["u_updated"] = (u_updated);
  j["u_sattr0"] = (u_sattr0);
  j["u_sattr1"] = (u_sattr1);
  j["u_sattr2"] = (u_sattr2);
  j["u_sattr3"] = (u_sattr3);
  j["u_sattr4"] = (u_sattr4);
  j["u_sattr5"] = (u_sattr5);
  j["u_sattr6"] = (u_sattr6);
  j["u_sattr7"] = (u_sattr7);
  j["u_iattr0"] = (u_iattr0);
  j["u_iattr1"] = (u_iattr1);
  j["u_iattr2"] = (u_iattr2);
  j["u_iattr3"] = (u_iattr3);
  j["u_iattr4"] = (u_iattr4);
  j["u_iattr5"] = (u_iattr5);
  j["u_iattr6"] = (u_iattr6);
  j["u_iattr7"] = (u_iattr7);
  return std::move(j.dump());
}

} // namespace auctionmark

