/* This file is automatically generated. Do NOT modify it directly! */

#include "category.h"
#include "utils/utils.h"
#include "json.h"
#include <cassert>

namespace auctionmark {

using njson = nlohmann::json;

Category::Category(Nullable<uint64_t> c_id_,
                   std::string        c_name_,
                   uint64_t           c_parent_id_,
                   bool               is_leaf_,
                   uint64_t           item_count_) :
  c_id(c_id_),
  c_name(c_name_),
  c_parent_id(c_parent_id_),
  is_leaf(is_leaf_),
  item_count(item_count_) {}

Category Category::FromJson(const std::string &json) {
  njson j = njson::parse(json);
  Category model_instance;
  assert(j["c_id"].is_number() || j["c_id"].is_null());
  if (!j["c_id"].is_null()) {
    model_instance.c_id = (j["c_id"].get<uint64_t>());
  }
  assert(j["c_name"].is_string());
  model_instance.c_name = (j["c_name"].get<std::string>());
  assert(j["c_parent_id"].is_number());
  model_instance.c_parent_id = (j["c_parent_id"].get<uint64_t>());
  return std::move(model_instance);
}

std::string Category::ToJson() {
  njson j;

  if (c_id.IsNull()) {
    j["c_id"] = nullptr;
  } else {
    j["c_id"] = (c_id.value());
  }
  j["c_name"] = (c_name);
  j["c_parent_id"] = (c_parent_id);
  return std::move(j.dump());
}

} // namespace auctionmark
