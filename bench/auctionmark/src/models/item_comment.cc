/* This file is automatically generated. Do NOT modify it directly! */

#include "item_comment.h"
#include "utils/utils.h"
#include "json.h"
#include <cassert>

namespace auctionmark {

using njson = nlohmann::json;

ItemComment::ItemComment(Nullable<uint64_t>    ic_id_,
                         Nullable<uint64_t>    ic_i_id_,
                         Nullable<uint64_t>    ic_u_id_,
                         Nullable<uint64_t>    ic_buyer_id_,
                         Nullable<std::string> ic_question_,
                         std::string           ic_response_,
                         std::time_t           ic_created_,
                         std::time_t           ic_updated_) :
  ic_id(ic_id_),
  ic_i_id(ic_i_id_),
  ic_u_id(ic_u_id_),
  ic_buyer_id(ic_buyer_id_),
  ic_question(ic_question_),
  ic_response(ic_response_),
  ic_created(ic_created_),
  ic_updated(ic_updated_) {}

ItemComment ItemComment::FromJson(const std::string &json) {
  njson j = njson::parse(json);
  ItemComment model_instance;
  assert(j["ic_id"].is_number() || j["ic_id"].is_null());
  if (!j["ic_id"].is_null()) {
    model_instance.ic_id = (j["ic_id"].get<uint64_t>());
  }
  assert(j["ic_i_id"].is_number() || j["ic_i_id"].is_null());
  if (!j["ic_i_id"].is_null()) {
    model_instance.ic_i_id = (j["ic_i_id"].get<uint64_t>());
  }
  assert(j["ic_u_id"].is_number() || j["ic_u_id"].is_null());
  if (!j["ic_u_id"].is_null()) {
    model_instance.ic_u_id = (j["ic_u_id"].get<uint64_t>());
  }
  assert(j["ic_buyer_id"].is_number() || j["ic_buyer_id"].is_null());
  if (!j["ic_buyer_id"].is_null()) {
    model_instance.ic_buyer_id = (j["ic_buyer_id"].get<uint64_t>());
  }
  assert(j["ic_question"].is_string() || j["ic_question"].is_null());
  if (!j["ic_question"].is_null()) {
    model_instance.ic_question = (j["ic_question"].get<std::string>());
  }
  assert(j["ic_response"].is_string());
  model_instance.ic_response = (j["ic_response"].get<std::string>());
  assert(j["ic_created"].is_string());
  model_instance.ic_created = (j["ic_created"].get<std::time_t>());
  assert(j["ic_updated"].is_string());
  model_instance.ic_updated = (j["ic_updated"].get<std::time_t>());
  return std::move(model_instance);
}

std::string ItemComment::ToJson() {
  njson j;

  if (ic_id.IsNull()) {
    j["ic_id"] = nullptr;
  } else {
    j["ic_id"] = (ic_id.value());
  }
  if (ic_i_id.IsNull()) {
    j["ic_i_id"] = nullptr;
  } else {
    j["ic_i_id"] = (ic_i_id.value());
  }
  if (ic_u_id.IsNull()) {
    j["ic_u_id"] = nullptr;
  } else {
    j["ic_u_id"] = (ic_u_id.value());
  }
  if (ic_buyer_id.IsNull()) {
    j["ic_buyer_id"] = nullptr;
  } else {
    j["ic_buyer_id"] = (ic_buyer_id.value());
  }
  if (ic_question.IsNull()) {
    j["ic_question"] = nullptr;
  } else {
    j["ic_question"] = (ic_question.value());
  }
  j["ic_response"] = (ic_response);
  j["ic_created"] = (ic_created);
  j["ic_updated"] = (ic_updated);
  return std::move(j.dump());
}

} // namespace auctionmark

