/* This file is automatically generated. Do NOT modify it directly! */

#include "useracct_attributes.h"
#include "utils/utils.h"
#include "json.h"
#include <cassert>

namespace auctionmark {

using njson = nlohmann::json;

UseracctAttributes::UseracctAttributes() {
  ua_name.reserve(32);
  ua_value.reserve(32);
}

UseracctAttributes::UseracctAttributes(uint64_t              ua_id_,
                                       uint64_t              ua_u_id_,
                                       std::string           ua_name_,
                                       std::string           ua_value_,
                                       Nullable<std::time_t> u_created_) :
    ua_id(ua_id_),
    ua_u_id(ua_u_id_),
    ua_name(ua_name_),
    ua_value(ua_value_),
    u_created(u_created_) {}

UseracctAttributes UseracctAttributes::FromJson(const std::string &json) {
  njson j = njson::parse(json);
  UseracctAttributes model_instance;
  assert(j["ua_id"].is_number());
  model_instance.ua_id = (j["ua_id"].get<uint64_t>());
  assert(j["ua_u_id"].is_number());
  model_instance.ua_u_id = (j["ua_u_id"].get<uint64_t>());
  assert(j["ua_name"].is_string());
  model_instance.ua_name = (j["ua_name"].get<std::string>());
  assert(j["ua_value"].is_string());
  model_instance.ua_value = (j["ua_value"].get<std::string>());
  assert(j["u_created"].is_string() || j["u_created"].is_null());
  if (!j["u_created"].is_null()) {
    model_instance.u_created = StrfTime(j["u_created"].get<std::string>());
  }
  return std::move(model_instance);
}

std::string UseracctAttributes::ToJson() {
  njson j;

  j["ua_id"] = (ua_id);
  j["ua_u_id"] = (ua_u_id);
  j["ua_name"] = (ua_name);
  j["ua_value"] = (ua_value);
  if (u_created.IsNull()) {
    j["u_created"] = nullptr;
  } else {
    j["u_created"] = TimeToString(u_created.value());
  }
  return std::move(j.dump());
}

} // namespace auctionmark

