/* This file is automatically generated. Do NOT modify it directly! */

#include "config_profile.h"
#include "utils/utils.h"
#include "json.h"
#include <cassert>

namespace auctionmark {

using njson = nlohmann::json;

ConfigProfile::ConfigProfile(Nullable<double>      cfp_scale_factor_,
                             Nullable<std::time_t> cfp_loader_start_,
                             Nullable<std::time_t> cfp_loader_stop_,
                             Nullable<std::string> cfp_user_item_histogram_) :
  cfp_scale_factor(cfp_scale_factor_),
  cfp_loader_start(cfp_loader_start_),
  cfp_loader_stop(cfp_loader_stop_),
  cfp_user_item_histogram(cfp_user_item_histogram_) {}

ConfigProfile ConfigProfile::FromJson(const std::string &json) {
  njson j = njson::parse(json);
  ConfigProfile model_instance;
  assert(j["cfp_scale_factor"].is_number() || j["cfp_scale_factor"].is_null());
  if (!j["cfp_scale_factor"].is_null()) {
    model_instance.cfp_scale_factor = (j["cfp_scale_factor"].get<double>());
  }
  assert(j["cfp_loader_start"].is_string() || j["cfp_loader_start"].is_null());
  if (!j["cfp_loader_start"].is_null()) {
    model_instance.cfp_loader_start = StrfTime(j["cfp_loader_start"].get<std::time_t>());
  }
  assert(j["cfp_loader_stop"].is_string() || j["cfp_loader_stop"].is_null());
  if (!j["cfp_loader_stop"].is_null()) {
    model_instance.cfp_loader_stop = StrfTime(j["cfp_loader_stop"].get<std::time_t>());
  }
  assert(j["cfp_user_item_histogram"].is_string() || j["cfp_user_item_histogram"].is_null());
  if (!j["cfp_user_item_histogram"].is_null()) {
    model_instance.cfp_user_item_histogram = (j["cfp_user_item_histogram"].get<std::string>());
  }
  return std::move(model_instance);
}

std::string ConfigProfile::ToJson() {
  njson j;

  if (cfp_scale_factor.IsNull()) {
    j["cfp_scale_factor"] = nullptr;
  } else {
    j["cfp_scale_factor"] = (cfp_scale_factor.value());
  }
  if (cfp_loader_start.IsNull()) {
    j["cfp_loader_start"] = nullptr;
  } else {
    j["cfp_loader_start"] = TimeToString(cfp_loader_start.value());
  }
  if (cfp_loader_stop.IsNull()) {
    j["cfp_loader_stop"] = nullptr;
  } else {
    j["cfp_loader_stop"] = TimeToString(cfp_loader_stop.value());
  }
  if (cfp_user_item_histogram.IsNull()) {
    j["cfp_user_item_histogram"] = nullptr;
  } else {
    j["cfp_user_item_histogram"] = (cfp_user_item_histogram.value());
  }
  return std::move(j.dump());
}

} // namespace auctionmark

