/* This file is automatically generated. Do NOT modify it directly! */

#include "item_bid.h"
#include "utils/utils.h"
#include "json.h"
#include <cassert>

namespace auctionmark {

using njson = nlohmann::json;

ItemBid::ItemBid(Nullable<uint64_t> ib_id_,
                 Nullable<uint64_t> ib_i_id_,
                 Nullable<uint64_t> ib_u_id_,
                 Nullable<uint64_t> ib_buyer_id_,
                 Nullable<double>   ib_bid_,
                 Nullable<double>   ib_max_bid_,
                 std::time_t        ib_created_,
                 std::time_t        ib_updated_) :
  ib_id(ib_id_),
  ib_i_id(ib_i_id_),
  ib_u_id(ib_u_id_),
  ib_buyer_id(ib_buyer_id_),
  ib_bid(ib_bid_),
  ib_max_bid(ib_max_bid_),
  ib_created(ib_created_),
  ib_updated(ib_updated_) {}

ItemBid ItemBid::FromJson(const std::string &json) {
  njson j = njson::parse(json);
  ItemBid model_instance;
  assert(j["ib_id"].is_number() || j["ib_id"].is_null());
  if (!j["ib_id"].is_null()) {
    model_instance.ib_id = (j["ib_id"].get<uint64_t>());
  }
  assert(j["ib_i_id"].is_number() || j["ib_i_id"].is_null());
  if (!j["ib_i_id"].is_null()) {
    model_instance.ib_i_id = (j["ib_i_id"].get<uint64_t>());
  }
  assert(j["ib_u_id"].is_number() || j["ib_u_id"].is_null());
  if (!j["ib_u_id"].is_null()) {
    model_instance.ib_u_id = (j["ib_u_id"].get<uint64_t>());
  }
  assert(j["ib_buyer_id"].is_number() || j["ib_buyer_id"].is_null());
  if (!j["ib_buyer_id"].is_null()) {
    model_instance.ib_buyer_id = (j["ib_buyer_id"].get<uint64_t>());
  }
  assert(j["ib_bid"].is_number() || j["ib_bid"].is_null());
  if (!j["ib_bid"].is_null()) {
    model_instance.ib_bid = (j["ib_bid"].get<double>());
  }
  assert(j["ib_max_bid"].is_number() || j["ib_max_bid"].is_null());
  if (!j["ib_max_bid"].is_null()) {
    model_instance.ib_max_bid = (j["ib_max_bid"].get<double>());
  }
  assert(j["ib_created"].is_string());
  model_instance.ib_created = (j["ib_created"].get<std::time_t>());
  assert(j["ib_updated"].is_string());
  model_instance.ib_updated = (j["ib_updated"].get<std::time_t>());
  return std::move(model_instance);
}

std::string ItemBid::ToJson() {
  njson j;

  if (ib_id.IsNull()) {
    j["ib_id"] = nullptr;
  } else {
    j["ib_id"] = (ib_id.value());
  }
  if (ib_i_id.IsNull()) {
    j["ib_i_id"] = nullptr;
  } else {
    j["ib_i_id"] = (ib_i_id.value());
  }
  if (ib_u_id.IsNull()) {
    j["ib_u_id"] = nullptr;
  } else {
    j["ib_u_id"] = (ib_u_id.value());
  }
  if (ib_buyer_id.IsNull()) {
    j["ib_buyer_id"] = nullptr;
  } else {
    j["ib_buyer_id"] = (ib_buyer_id.value());
  }
  if (ib_bid.IsNull()) {
    j["ib_bid"] = nullptr;
  } else {
    j["ib_bid"] = (ib_bid.value());
  }
  if (ib_max_bid.IsNull()) {
    j["ib_max_bid"] = nullptr;
  } else {
    j["ib_max_bid"] = (ib_max_bid.value());
  }
  j["ib_created"] = (ib_created);
  j["ib_updated"] = (ib_updated);
  return std::move(j.dump());
}

} // namespace auctionmark

